# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pipeline.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='pipeline.proto',
  package='provenance_system',
  syntax='proto3',
  serialized_pb=_b('\n\x0epipeline.proto\x12\x11provenance_system\"H\n\tGrid_data\x12;\n\x0bmeasurement\x18\x01 \x01(\x0b\x32&.provenance_system.measurement_message\"]\n\x13measurement_message\x12\x10\n\x08meter_id\x18\x01 \x01(\x05\x12\x11\n\tmetric_id\x18\x02 \x01(\x05\x12\x11\n\ttimestamp\x18\x03 \x01(\x05\x12\x0e\n\x06values\x18\x04 \x01(\t\"\x1e\n\x05reply\x12\x15\n\rresponse_code\x18\x01 \x01(\t2R\n\x07gateway\x12G\n\tpush_data\x12\x1c.provenance_system.Grid_data\x1a\x18.provenance_system.reply\"\x00(\x01\x62\x06proto3')
)




_GRID_DATA = _descriptor.Descriptor(
  name='Grid_data',
  full_name='provenance_system.Grid_data',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='measurement', full_name='provenance_system.Grid_data.measurement', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=37,
  serialized_end=109,
)


_MEASUREMENT_MESSAGE = _descriptor.Descriptor(
  name='measurement_message',
  full_name='provenance_system.measurement_message',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='meter_id', full_name='provenance_system.measurement_message.meter_id', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='metric_id', full_name='provenance_system.measurement_message.metric_id', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='provenance_system.measurement_message.timestamp', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='values', full_name='provenance_system.measurement_message.values', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=111,
  serialized_end=204,
)


_REPLY = _descriptor.Descriptor(
  name='reply',
  full_name='provenance_system.reply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='response_code', full_name='provenance_system.reply.response_code', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=206,
  serialized_end=236,
)

_GRID_DATA.fields_by_name['measurement'].message_type = _MEASUREMENT_MESSAGE
DESCRIPTOR.message_types_by_name['Grid_data'] = _GRID_DATA
DESCRIPTOR.message_types_by_name['measurement_message'] = _MEASUREMENT_MESSAGE
DESCRIPTOR.message_types_by_name['reply'] = _REPLY
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Grid_data = _reflection.GeneratedProtocolMessageType('Grid_data', (_message.Message,), dict(
  DESCRIPTOR = _GRID_DATA,
  __module__ = 'pipeline_pb2'
  # @@protoc_insertion_point(class_scope:provenance_system.Grid_data)
  ))
_sym_db.RegisterMessage(Grid_data)

measurement_message = _reflection.GeneratedProtocolMessageType('measurement_message', (_message.Message,), dict(
  DESCRIPTOR = _MEASUREMENT_MESSAGE,
  __module__ = 'pipeline_pb2'
  # @@protoc_insertion_point(class_scope:provenance_system.measurement_message)
  ))
_sym_db.RegisterMessage(measurement_message)

reply = _reflection.GeneratedProtocolMessageType('reply', (_message.Message,), dict(
  DESCRIPTOR = _REPLY,
  __module__ = 'pipeline_pb2'
  # @@protoc_insertion_point(class_scope:provenance_system.reply)
  ))
_sym_db.RegisterMessage(reply)



_GATEWAY = _descriptor.ServiceDescriptor(
  name='gateway',
  full_name='provenance_system.gateway',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=238,
  serialized_end=320,
  methods=[
  _descriptor.MethodDescriptor(
    name='push_data',
    full_name='provenance_system.gateway.push_data',
    index=0,
    containing_service=None,
    input_type=_GRID_DATA,
    output_type=_REPLY,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_GATEWAY)

DESCRIPTOR.services_by_name['gateway'] = _GATEWAY

# @@protoc_insertion_point(module_scope)
